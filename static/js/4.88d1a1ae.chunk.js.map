{"version":3,"file":"static/js/4.88d1a1ae.chunk.js","mappings":"sIAiCA,IA/BiB,SAACA,GACd,OAAwCC,EAAAA,EAAAA,UAAS,IAAG,eAA7CC,EAAY,KAAEC,EAAe,KACpC,GAAkCF,EAAAA,EAAAA,WAAS,GAAM,eAA1CG,EAAS,KAAEC,EAAY,KAE1BC,EAAUN,EAAaE,GAiB3B,MAAO,CACHK,MAAOL,EACPI,QAAAA,EACAE,UAnBYF,GAAWF,EAoBvBK,YAlBgB,WAChBJ,GAAa,EACjB,EAiBIK,mBAfuB,SAACC,GACxBR,EAAgBQ,EAAMC,OAAOL,MACjC,EAcIM,MAZU,WACVV,EAAgB,IAChBE,GAAa,EACjB,EAWJ,C,iJCiGA,EA1HoB,WAClB,IAAMS,GAAUC,EAAAA,EAAAA,UAChB,GAA8Bd,EAAAA,EAAAA,WAAS,GAAM,eAAtCe,EAAO,KAAEC,EAAU,KAC1B,GAAkChB,EAAAA,EAAAA,WAAS,GAAM,eAA1CiB,EAAS,KAChB,GAD8B,MACJjB,EAAAA,EAAAA,aAAU,eAA7BkB,EAAK,KAAEC,EAAQ,KAEtB,GAOIC,EAAAA,EAAAA,IAAS,SAACC,GAAI,MAAqB,KAAhBA,EAAKC,MAAa,IANhCC,EAAI,EAAXjB,MACSkB,EAAW,EAApBnB,QACUoB,EAAY,EAAtBlB,SACoBmB,EAAiB,EAArCjB,mBACakB,EAAe,EAA5BnB,YAIF,GAHkB,EAAhBI,OAUEQ,EAAAA,EAAAA,IAAS,SAACC,GAAI,OAAKA,EAAKO,SAAS,IAAI,KANhCC,EAAK,EAAZvB,MACSwB,EAAY,EAArBzB,QACU0B,EAAa,EAAvBxB,SACoByB,EAAkB,EAAtCvB,mBACawB,EAAgB,EAA7BzB,YAIF,GAHmB,EAAjBI,OAUEQ,EAAAA,EAAAA,IAAS,SAACC,GAAI,MAAqB,KAAhBA,EAAKC,MAAa,KANhCY,EAAO,EAAd5B,MACS6B,EAAc,EAAvB9B,QACU+B,EAAe,EAAzB7B,SACoB8B,EAAoB,EAAxC5B,mBACa6B,EAAkB,EAA/B9B,YAII+B,GAHe,EAAnB3B,MAGiB,CACjBW,KAAME,EAAee,EAAAA,EAAAA,QAAiB,GACtCX,MAAOE,EAAgBS,EAAAA,EAAAA,QAAiB,GACxCN,QAASE,EAAkBI,EAAAA,EAAAA,QAAiB,KAwC9C,OACE,gCACGzB,IAAW,cAAG0B,UAAWC,EAAAA,EAAAA,SAAoB,SAAC,0CAC9CzB,IAAa,cAAGwB,UAAWC,EAAAA,EAAAA,MAAiB,SAAC,UAC7CxB,IAAS,cAAGuB,UAAWC,EAAAA,EAAAA,MAAiB,SAAExB,KAC3C,gBAAKuB,UAAWD,EAAAA,EAAAA,KAAY,UAC1B,kBAAMC,UAAWD,EAAAA,EAAAA,QAAgBG,SA3CjB,SAACjC,GAGrB,OAFAA,EAAMkC,iBAEDpB,EAEOM,EAEAK,OAIRX,GAAeM,GAAgBK,GACjCU,MAAM,mEAAoE,CACxEC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnB1B,KAAAA,EACAM,MAAAA,EACAK,QAAAA,IAEFgB,QAAS,CACP,eAAgB,sBAEjBC,MAAK,SAACC,GAIP,OAHKA,EAASC,IACZlC,EAAS,gCAEJiC,EAASE,MAClB,IAAGH,MAAK,SAAC9B,GACHA,EAAKH,MACPC,EAASE,EAAKH,OAEdF,GAAW,EAEf,KAzBOG,EAAS,gCAFTA,EAAS,8BAFTA,EAAS,4BA+BpB,EAQgEoC,IAAK1C,EAAQ,WAErE,kBAAO4B,UAAWD,EAAAA,EAAAA,MAAa,SAAC,UAChC,kBACEC,UAAWF,EAAWhB,KACtBiC,KAAK,OACLC,SAAU/B,EACVgC,OAAQ/B,EACRrB,MAAOiB,EACPA,KAAK,UAGP,kBAAOkB,UAAWD,EAAAA,EAAAA,MAAa,SAAC,WAChC,kBACEC,UAAWF,EAAWV,MACtB2B,KAAK,OACLC,SAAUzB,EACV0B,OAAQzB,EACR3B,MAAOuB,EACPN,KAAK,WAGP,kBAAOkB,UAAWD,EAAAA,EAAAA,MAAa,SAAC,aAChC,qBACEC,UAAWF,EAAWL,QACtBuB,SAAUpB,EACVqB,OAAQpB,EACRhC,MAAO4B,EACPX,KAAK,aAGP,gBAAKkB,UAAWD,EAAAA,EAAAA,KAAY,UAC1B,mBAAQC,UAAWD,EAAAA,EAAAA,OAAegB,KAAK,SAAQ,SAAC,oBAM5D,EClHA,EATgB,WACZ,OACI,4BACI,cAAGf,UAAWC,EAAAA,EAAAA,MAAiB,SAAC,aAChC,SAAC,EAAW,MAGxB,C","sources":["hooks/use-input.js","components/contact/ContactForm.js","pages/Contact.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst useInput = (validateData) => {\n    const [enteredValue, setEnteredValue] = useState('');\n    const [isTouched, setIsTouched] = useState(false);\n\n    let isValid = validateData(enteredValue);\n    let hasError = !isValid && isTouched;\n\n    const blurHandler = () => {\n        setIsTouched(true);\n    }\n\n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value);\n    }\n\n    const reset = () => {\n        setEnteredValue('');\n        setIsTouched(false);\n    }\n\n\n    return {\n        value: enteredValue,\n        isValid,\n        hasError,\n        blurHandler,\n        valueChangeHandler,\n        reset\n    }\n}\n\nexport default useInput;","import { useRef, useState } from \"react\";\nimport useInput from \"../../hooks/use-input\";\nimport styles from \"./css/contact-form.module.css\";\nimport mainStyles from './../main.module.css';\nimport emailjs from '@emailjs/browser';\n\nconst ContactForm = () => {\n  const formRef = useRef();\n  const [hasSent, setHasSent] = useState(false);\n  const [sendError, setSendError] = useState(false);\n  const [error, setError] = useState();\n\n  const {\n    value: name,\n    isValid: nameIsValid,\n    hasError: nameHasError,\n    valueChangeHandler: nameChangeHandler,\n    blurHandler: nameBlurHandler,\n    reset: resetName,\n  } = useInput((data) => data.trim() !== \"\");\n\n  const {\n    value: email,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    blurHandler: emailBlurHandler,\n    reset: resetEmail,\n  } = useInput((data) => data.includes(\"@\"));\n\n  const {\n    value: message,\n    isValid: messageIsValid,\n    hasError: messageHasError,\n    valueChangeHandler: messageChangeHandler,\n    blurHandler: messageBlurHandler,\n    reset: resetMessage,\n  } = useInput((data) => data.trim() !== '');\n\n  const classNames = {\n    name: nameHasError ? styles.invalid : \"\",\n    email: emailHasError ? styles.invalid : \"\",\n    message: messageHasError ? styles.invalid : \"\"\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    if (!nameIsValid) {\n      return setError('Please enter a valid name');\n    } else if (!emailIsValid) {\n      return setError('Please enter a valid email');\n    } else if (!messageIsValid) {\n      return setError('Please enter a valid message');\n    }\n\n    if (nameIsValid && emailIsValid && messageIsValid) {\n      fetch('https://dada-chinese-rest-api.herokuapp.com/contact/contact-form', {\n        method: 'POST',\n        body: JSON.stringify({\n          name,\n          email,\n          message\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then((response) => {\n        if (!response.ok) {\n          setError(\"Error please try again later\");\n        }\n        return response.json();\n      }).then((data) => {\n        if (data.error) {\n          setError(data.error)\n        } else {\n          setHasSent(true);\n        }\n      });\n    }\n  }\n\n  return (\n    <>\n      {hasSent && <p className={mainStyles.subtitle}>Sent, we will get back to you shortly</p>}\n      {sendError && <p className={mainStyles.error}>Error</p>}\n      {error && <p className={mainStyles.error}>{error}</p>}\n      <div className={styles.wrap}>\n        <form className={styles.contact} onSubmit={submitHandler} ref={formRef}>\n\n          <label className={styles.label}>Name</label>\n          <input\n            className={classNames.name}\n            type=\"text\"\n            onChange={nameChangeHandler}\n            onBlur={nameBlurHandler}\n            value={name}\n            name=\"name\"\n          />\n\n          <label className={styles.label}>Email</label>\n          <input\n            className={classNames.email}\n            type=\"text\"\n            onChange={emailChangeHandler}\n            onBlur={emailBlurHandler}\n            value={email}\n            name=\"email\"\n          />\n\n          <label className={styles.label}>Message</label>\n          <textarea\n            className={classNames.message}\n            onChange={messageChangeHandler}\n            onBlur={messageBlurHandler}\n            value={message}\n            name='message'\n          ></textarea>\n\n          <div className={styles.wrap}>\n            <button className={styles.submit} type=\"submit\">Submit</button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default ContactForm;","import mainStyles from './../components/main.module.css';\nimport ContactForm from '../components/contact/ContactForm';\n\nconst Contact = () => {\n    return (\n        <div>\n            <p className={mainStyles.title}>Contact</p>\n            <ContactForm />\n        </div>\n    );\n}\n\nexport default Contact;"],"names":["validateData","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","isValid","value","hasError","blurHandler","valueChangeHandler","event","target","reset","formRef","useRef","hasSent","setHasSent","sendError","error","setError","useInput","data","trim","name","nameIsValid","nameHasError","nameChangeHandler","nameBlurHandler","includes","email","emailIsValid","emailHasError","emailChangeHandler","emailBlurHandler","message","messageIsValid","messageHasError","messageChangeHandler","messageBlurHandler","classNames","styles","className","mainStyles","onSubmit","preventDefault","fetch","method","body","JSON","stringify","headers","then","response","ok","json","ref","type","onChange","onBlur"],"sourceRoot":""}