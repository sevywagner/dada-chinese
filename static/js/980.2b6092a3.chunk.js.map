{"version":3,"file":"static/js/980.2b6092a3.chunk.js","mappings":"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","sources":["hooks/use-input.js","webpack://dada-chinese/./src/components/contact/css/contact-form.module.css?4fe6","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","components/contact/ContactForm.js","pages/Contact.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst useInput = (validateData) => {\n    const [enteredValue, setEnteredValue] = useState('');\n    const [isTouched, setIsTouched] = useState(false);\n\n    let isValid = validateData(enteredValue);\n    let hasError = !isValid && isTouched;\n\n    const blurHandler = () => {\n        setIsTouched(true);\n    }\n\n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value);\n    }\n\n    const reset = () => {\n        setEnteredValue('');\n        setIsTouched(false);\n    }\n\n\n    return {\n        value: enteredValue,\n        isValid,\n        hasError,\n        blurHandler,\n        valueChangeHandler,\n        reset\n    }\n}\n\nexport default useInput;","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"contact-form_contact__e1TKj\",\"wrap\":\"contact-form_wrap__7XlKk\",\"invalid\":\"contact-form_invalid__EycRU\",\"label\":\"contact-form_label__AksD3\",\"submit\":\"contact-form_submit__B9Q05\",\"hover\":\"contact-form_hover__EZvMx\"};","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.10.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { useRef, useState } from \"react\";\nimport useInput from \"../../hooks/use-input\";\nimport styles from \"./css/contact-form.module.css\";\nimport mainStyles from './../main.module.css';\nimport emailjs from '@emailjs/browser';\n\nconst ContactForm = () => {\n  const formRef = useRef();\n  const [hasSent, setHasSent] = useState(false);\n  const [sendError, setSendError] = useState(false);\n  const [error, setError] = useState();\n\n  const {\n    value: name,\n    isValid: nameIsValid,\n    hasError: nameHasError,\n    valueChangeHandler: nameChangeHandler,\n    blurHandler: nameBlurHandler,\n    reset: resetName,\n  } = useInput((data) => data.trim() !== \"\");\n\n  const {\n    value: email,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    blurHandler: emailBlurHandler,\n    reset: resetEmail,\n  } = useInput((data) => data.includes(\"@\"));\n\n  const {\n    value: message,\n    isValid: messageIsValid,\n    hasError: messageHasError,\n    valueChangeHandler: messageChangeHandler,\n    blurHandler: messageBlurHandler,\n    reset: resetMessage,\n  } = useInput((data) => data.trim() !== '');\n\n  const classNames = {\n    name: nameHasError ? styles.invalid : \"\",\n    email: emailHasError ? styles.invalid : \"\",\n    message: messageHasError ? styles.invalid : \"\"\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    if (!nameIsValid) {\n      return setError('Please enter a valid name');\n    } else if (!emailIsValid) {\n      return setError('Please enter a valid email');\n    } else if (!messageIsValid) {\n      return setError('Please enter a valid message');\n    }\n\n    if (nameIsValid && emailIsValid && messageIsValid) {\n      emailjs.sendForm('service_iff9mux', 'template_lszstvs', formRef.current, 'PyPxMRbgnyMI7gkRQ').then((result) => {\n        console.log(result);\n        setHasSent(true);\n\n        resetName();\n        resetEmail();\n        resetMessage();\n      }).catch((err) => {\n        setSendError(true);\n        console.log(err);\n      })\n    }\n  }\n\n  return (\n    <>\n      {hasSent && <p className={mainStyles.subtitle}>Sent, we will get back to you shortly</p>}\n      {sendError && <p className={mainStyles.error}>Error</p>}\n      {error && <p className={mainStyles.error}>{error}</p>}\n      <div className={styles.wrap}>\n        <form className={styles.contact} onSubmit={submitHandler} ref={formRef}>\n\n          <label className={styles.label}>Name</label>\n          <input\n            className={classNames.name}\n            type=\"text\"\n            onChange={nameChangeHandler}\n            onBlur={nameBlurHandler}\n            value={name}\n            name=\"name\"\n          />\n\n          <label className={styles.label}>Email</label>\n          <input\n            className={classNames.email}\n            type=\"text\"\n            onChange={emailChangeHandler}\n            onBlur={emailBlurHandler}\n            value={email}\n            name=\"email\"\n          />\n\n          <label className={styles.label}>Message</label>\n          <textarea\n            className={classNames.message}\n            onChange={messageChangeHandler}\n            onBlur={messageBlurHandler}\n            value={message}\n            name='message'\n          ></textarea>\n\n          <div className={styles.wrap}>\n            <button className={styles.submit} type=\"submit\">Submit</button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default ContactForm;","import mainStyles from './../components/main.module.css';\nimport ContactForm from '../components/contact/ContactForm';\n\nconst Contact = () => {\n    return (\n        <div>\n            <p className={mainStyles.title}>Contact</p>\n            <ContactForm />\n        </div>\n    );\n}\n\nexport default Contact;"],"names":["validateData","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","isValid","value","hasError","blurHandler","valueChangeHandler","event","target","reset","store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","formRef","useRef","hasSent","setHasSent","sendError","setSendError","error","setError","useInput","trim","name","nameIsValid","nameHasError","nameChangeHandler","nameBlurHandler","resetName","includes","email","emailIsValid","emailHasError","emailChangeHandler","emailBlurHandler","resetEmail","message","messageIsValid","messageHasError","messageChangeHandler","messageBlurHandler","resetMessage","classNames","styles","className","mainStyles","onSubmit","preventDefault","emailjs","current","then","result","console","log","catch","err","ref","type","onChange","onBlur"],"sourceRoot":""}